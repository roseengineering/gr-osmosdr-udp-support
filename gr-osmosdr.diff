diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index c05b8d9..ef19be2 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -143,6 +143,14 @@ GR_INCLUDE_SUBDIRECTORY(fcd)
 endif(ENABLE_FCD OR ENABLE_FCDPP)
 
 ########################################################################
+# Setup UDP component
+########################################################################
+GR_REGISTER_COMPONENT("IQ UDP Source & Sink" ENABLE_UDP GNURADIO_BLOCKS_FOUND)
+if(ENABLE_UDP)
+GR_INCLUDE_SUBDIRECTORY(udp)
+endif(ENABLE_UDP)
+
+########################################################################
 # Setup File component
 ########################################################################
 GR_REGISTER_COMPONENT("IQ File Source & Sink" ENABLE_FILE GNURADIO_BLOCKS_FOUND)
diff --git a/lib/config.h.in b/lib/config.h.in
index 42e72f1..6e5fa9c 100644
--- a/lib/config.h.in
+++ b/lib/config.h.in
@@ -18,6 +18,7 @@
 #cmakedefine ENABLE_AIRSPY
 #cmakedefine ENABLE_SOAPY
 #cmakedefine ENABLE_REDPITAYA
+#cmakedefine ENABLE_UDP
 #cmakedefine ENABLE_FREESRP
 
 //provide NAN define for MSVC older than VC12
diff --git a/lib/device.cc b/lib/device.cc
index 025a22b..ba5c153 100644
--- a/lib/device.cc
+++ b/lib/device.cc
@@ -90,6 +90,10 @@
 #include <freesrp_source_c.h>
 #endif
 
+#ifdef ENABLE_UDP
+#include <udp_source_c.h>
+#endif
+
 #include "arg_helpers.h"
 
 using namespace osmosdr;
@@ -211,6 +215,10 @@ devices_t device::find(const device_t &hint)
   BOOST_FOREACH( std::string dev, file_source_c::get_devices( fake ) )
     devices.push_back( device_t(dev) );
 #endif
+#ifdef ENABLE_UDP
+  BOOST_FOREACH( std::string dev, udp_source_c::get_devices( fake ) )
+    devices.push_back( device_t(dev) );
+#endif
 
   return devices;
 }
diff --git a/lib/sink_impl.cc b/lib/sink_impl.cc
index 285638b..d03fade 100644
--- a/lib/sink_impl.cc
+++ b/lib/sink_impl.cc
@@ -53,6 +53,10 @@
 #ifdef ENABLE_FILE
 #include "file_sink_c.h"
 #endif
+#ifdef ENABLE_UDP
+#include "udp_sink_c.h"
+#endif
+
 
 #include "arg_helpers.h"
 #include "sink_impl.h"
@@ -108,6 +112,9 @@ sink_impl::sink_impl( const std::string &args )
 #ifdef ENABLE_FILE
   dev_types.push_back("file");
 #endif
+#ifdef ENABLE_UDP
+  dev_types.push_back("udp");
+#endif
 
   std::cerr << "gr-osmosdr "
             << GR_OSMOSDR_VERSION << " (" << GR_OSMOSDR_LIBVER << ") "
@@ -159,6 +166,10 @@ sink_impl::sink_impl( const std::string &args )
     BOOST_FOREACH( std::string dev, file_sink_c::get_devices() )
       dev_list.push_back( dev );
 #endif
+#ifdef ENABLE_UDP
+    BOOST_FOREACH( std::string dev, udp_sink_c::get_devices() )
+      dev_list.push_back( dev );
+#endif
 
 //    std::cerr << std::endl;
 //    BOOST_FOREACH( std::string dev, dev_list )
@@ -223,6 +234,12 @@ sink_impl::sink_impl( const std::string &args )
       block = sink; iface = sink.get();
     }
 #endif
+#ifdef ENABLE_UDP
+    if ( dict.count("udp") ) {
+      udp_sink_c_sptr sink = make_udp_sink_c( arg );
+      block = sink; iface = sink.get();
+    }
+#endif
 
     if ( iface != NULL && long(block.get()) != 0 ) {
       _devs.push_back( iface );
diff --git a/lib/source_impl.cc b/lib/source_impl.cc
index a28f314..e89b1be 100644
--- a/lib/source_impl.cc
+++ b/lib/source_impl.cc
@@ -44,6 +44,10 @@
 #include <file_source_c.h>
 #endif
 
+#ifdef ENABLE_UDP
+#include <udp_source_c.h>
+#endif
+
 #ifdef ENABLE_RTL
 #include <rtl_source_c.h>
 #endif
@@ -129,6 +133,9 @@ source_impl::source_impl( const std::string &args )
 #ifdef ENABLE_FILE
   dev_types.push_back("file");
 #endif
+#ifdef ENABLE_UDP
+  dev_types.push_back("udp");
+#endif
 #ifdef ENABLE_OSMOSDR
   dev_types.push_back("osmosdr");
 #endif
@@ -295,6 +302,13 @@ source_impl::source_impl( const std::string &args )
     }
 #endif
 
+#ifdef ENABLE_UDP
+    if ( dict.count("udp") ) {
+      udp_source_c_sptr src = make_udp_source_c( arg );
+      block = src; iface = src.get();
+    }
+#endif
+
 #ifdef ENABLE_RTL
     if ( dict.count("rtl") ) {
       rtl_source_c_sptr src = make_rtl_source_c( arg );
diff --git a/lib/udp/CMakeLists.txt b/lib/udp/CMakeLists.txt
new file mode 100644
index 0000000..760ac07
--- /dev/null
+++ b/lib/udp/CMakeLists.txt
@@ -0,0 +1,38 @@
+# Copyright 2012 Free Software Foundation, Inc.
+#
+# This file is part of GNU Radio
+#
+# GNU Radio is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3, or (at your option)
+# any later version.
+#
+# GNU Radio is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Radio; see the file COPYING.  If not, write to
+# the Free Software Foundation, Inc., 51 Franklin Street,
+# Boston, MA 02110-1301, USA.
+
+########################################################################
+# This file included, use CMake directory variables
+########################################################################
+
+include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+set(udp_srcs
+    ${CMAKE_CURRENT_SOURCE_DIR}/udp_source_c.cc
+    ${CMAKE_CURRENT_SOURCE_DIR}/udp_sink_c.cc
+)
+
+########################################################################
+# Append gnuradio-osmosdr library sources
+########################################################################
+list(APPEND gr_osmosdr_srcs ${udp_srcs})
+#list(APPEND gr_osmosdr_libs ${GNURADIO_BLOCKS_LIBRARIES})
+
diff --git a/lib/udp/udp_sink_c.cc b/lib/udp/udp_sink_c.cc
new file mode 100644
index 0000000..0fcfcea
--- /dev/null
+++ b/lib/udp/udp_sink_c.cc
@@ -0,0 +1,223 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <fstream>
+#include <string>
+#include <sstream>
+
+#include <boost/assign.hpp>
+#include <boost/format.hpp>
+
+#include <gnuradio/io_signature.h>
+
+#include "udp_sink_c.h"
+
+#include "arg_helpers.h"
+
+using namespace boost::assign;
+
+udp_sink_c_sptr make_udp_sink_c(const std::string &args)
+{
+  return gnuradio::get_initial_sptr(new udp_sink_c(args));
+}
+
+udp_sink_c::udp_sink_c(const std::string &args) :
+  gr::hier_block2("udp_sink_c",
+                 gr::io_signature::make(1, 1, sizeof (gr_complex)),
+                 gr::io_signature::make(0, 0, 0))
+{
+  std::string host = "0.0.0.0";
+  bool throttle = false;
+  _freq = 0;
+  _rate = 0;
+  _port = 7777;
+
+  dict_t dict = params_to_dict(args);
+
+  if (dict.count("host"))
+    host = dict["host"];
+
+  if (dict.count("port"))
+    _port = boost::lexical_cast< int >( dict["port"] );
+
+  if (dict.count("freq"))
+    _freq = boost::lexical_cast< double >( dict["freq"] );
+
+  if (dict.count("rate"))
+    _rate = boost::lexical_cast< double >( dict["rate"] );
+
+  if (dict.count("throttle"))
+    throttle = ("true" == dict["throttle"] ? true : false);
+
+  if (_freq < 0)
+    throw std::runtime_error("Parameter 'freq' may not be negative.");
+
+  if (0 == _rate && throttle)
+    throw std::runtime_error("Parameter 'rate' is missing in arguments.");
+
+  _udp_rate = _rate;
+
+  _sink = gr::blocks::udp_sink::make( sizeof(gr_complex),
+                                           host.c_str(),
+                                           _port );
+
+  _throttle = gr::blocks::throttle::make( sizeof(gr_complex), _udp_rate );
+
+  if (throttle) {
+    connect( self(), 0, _throttle, 0 );
+    connect( _throttle, 0, _sink, 0 );
+  } else {
+    connect( self(), 0, _sink, 0 );
+  }
+}
+
+udp_sink_c::~udp_sink_c()
+{
+}
+
+std::string udp_sink_c::name()
+{
+  return "IQ UDP sink";
+}
+
+std::vector<std::string> udp_sink_c::get_devices( bool fake )
+{
+  std::vector<std::string> devices;
+
+  if ( fake )
+  {
+    std::string args = "host='192.168.0.5',port=8361";
+    args += ",rate=1e6,freq=100e6,throttle=true";
+    args += ",label='Complex Sampled (IQ) File'";
+    devices.push_back( args );
+  }
+
+  return devices;
+}
+
+size_t udp_sink_c::get_num_channels( void )
+{
+  return 1;
+}
+
+osmosdr::meta_range_t udp_sink_c::get_sample_rates( void )
+{
+  osmosdr::meta_range_t range;
+
+  range += osmosdr::range_t( _udp_rate , _udp_rate); /* always return udp's original rate */
+
+  return range;
+}
+
+double udp_sink_c::set_sample_rate( double rate )
+{
+  if ( _udp_rate != rate )
+  {
+    std::cerr << boost::format("WARNING: Overriding original sample rate of %g with %g")
+                 % _udp_rate % rate
+              << std::endl;
+  }
+
+  _throttle->set_sample_rate( rate );
+
+  _rate = rate;
+
+  return get_sample_rate();
+}
+
+double udp_sink_c::get_sample_rate( void )
+{
+  return _rate;
+}
+
+osmosdr::freq_range_t udp_sink_c::get_freq_range( size_t chan )
+{
+  return osmosdr::freq_range_t(_freq, _freq);
+}
+
+double udp_sink_c::set_center_freq( double freq, size_t chan )
+{
+  return get_center_freq(chan);
+}
+
+double udp_sink_c::get_center_freq( size_t chan )
+{
+  return _freq;
+}
+
+double udp_sink_c::set_freq_corr( double ppm, size_t chan )
+{
+  return get_freq_corr( chan );
+}
+
+double udp_sink_c::get_freq_corr( size_t chan )
+{
+  return 0;
+}
+
+std::vector<std::string> udp_sink_c::get_gain_names( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+osmosdr::gain_range_t udp_sink_c::get_gain_range( size_t chan )
+{
+  return osmosdr::gain_range_t();
+}
+
+osmosdr::gain_range_t udp_sink_c::get_gain_range( const std::string & name, size_t chan )
+{
+  return get_gain_range( chan );
+}
+
+double udp_sink_c::set_gain( double gain, size_t chan )
+{
+  return get_gain(chan);
+}
+
+double udp_sink_c::set_gain( double gain, const std::string & name, size_t chan )
+{
+  return set_gain(chan);
+}
+
+double udp_sink_c::get_gain( size_t chan )
+{
+  return 0;
+}
+
+double udp_sink_c::get_gain( const std::string & name, size_t chan )
+{
+  return get_gain(chan);
+}
+
+std::vector< std::string > udp_sink_c::get_antennas( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+std::string udp_sink_c::set_antenna( const std::string & antenna, size_t chan )
+{
+  return get_antenna(chan);
+}
+
+std::string udp_sink_c::get_antenna( size_t chan )
+{
+  return "";
+}
diff --git a/lib/udp/udp_sink_c.h b/lib/udp/udp_sink_c.h
new file mode 100644
index 0000000..3269f0f
--- /dev/null
+++ b/lib/udp/udp_sink_c.h
@@ -0,0 +1,83 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+#ifndef UDP_SINK_C_H
+#define UDP_SINK_C_H
+
+#include <gnuradio/hier_block2.h>
+#include <gnuradio/blocks/udp_sink.h>
+#include <gnuradio/blocks/throttle.h>
+
+#include "sink_iface.h"
+
+class udp_sink_c;
+
+typedef boost::shared_ptr< udp_sink_c > udp_sink_c_sptr;
+
+udp_sink_c_sptr make_udp_sink_c( const std::string & args = "" );
+
+class udp_sink_c :
+    public gr::hier_block2,
+    public sink_iface
+{
+private:
+  friend udp_sink_c_sptr make_udp_sink_c(const std::string &args);
+
+  udp_sink_c(const std::string &args);
+
+public:
+  ~udp_sink_c();
+
+  std::string name();
+
+  static std::vector< std::string > get_devices( bool fake = false );
+
+  size_t get_num_channels( void );
+
+  osmosdr::meta_range_t get_sample_rates( void );
+  double set_sample_rate( double rate );
+  double get_sample_rate( void );
+
+  osmosdr::freq_range_t get_freq_range( size_t chan = 0 );
+  double set_center_freq( double freq, size_t chan = 0 );
+  double get_center_freq( size_t chan = 0 );
+  double set_freq_corr( double ppm, size_t chan = 0 );
+  double get_freq_corr( size_t chan = 0 );
+
+  std::vector<std::string> get_gain_names( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( const std::string & name, size_t chan = 0 );
+  double set_gain( double gain, size_t chan = 0 );
+  double set_gain( double gain, const std::string & name, size_t chan = 0 );
+  double get_gain( size_t chan = 0 );
+  double get_gain( const std::string & name, size_t chan = 0 );
+
+  std::vector< std::string > get_antennas( size_t chan = 0 );
+  std::string set_antenna( const std::string & antenna, size_t chan = 0 );
+  std::string get_antenna( size_t chan = 0 );
+
+private:
+  gr::blocks::udp_sink::sptr _sink;
+  gr::blocks::throttle::sptr _throttle;
+  double _udp_rate;
+  double _freq, _rate;
+  int _port;
+};
+
+#endif // UDP_SINK_C_H
diff --git a/lib/udp/udp_source_c.cc b/lib/udp/udp_source_c.cc
new file mode 100644
index 0000000..06562e6
--- /dev/null
+++ b/lib/udp/udp_source_c.cc
@@ -0,0 +1,223 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <fstream>
+#include <string>
+#include <sstream>
+
+#include <boost/assign.hpp>
+#include <boost/format.hpp>
+
+#include <gnuradio/io_signature.h>
+
+#include "udp_source_c.h"
+
+#include "arg_helpers.h"
+
+using namespace boost::assign;
+
+udp_source_c_sptr make_udp_source_c(const std::string &args)
+{
+  return gnuradio::get_initial_sptr(new udp_source_c(args));
+}
+
+udp_source_c::udp_source_c(const std::string &args) :
+  gr::hier_block2("udp_source_c",
+                 gr::io_signature::make(0, 0, 0),
+                 gr::io_signature::make(1, 1, sizeof (gr_complex)))
+{
+  std::string host = "0.0.0.0";
+  bool throttle = true;
+  _freq = 0;
+  _rate = 0;
+  _port = 7777;
+
+  dict_t dict = params_to_dict(args);
+
+  if (dict.count("host"))
+    host = dict["host"];
+
+  if (dict.count("port"))
+    _port = boost::lexical_cast< int >( dict["port"] );
+
+  if (dict.count("freq"))
+    _freq = boost::lexical_cast< double >( dict["freq"] );
+
+  if (dict.count("rate"))
+    _rate = boost::lexical_cast< double >( dict["rate"] );
+
+  if (dict.count("throttle"))
+    throttle = ("true" == dict["throttle"] ? true : false);
+
+  if (_freq < 0)
+    throw std::runtime_error("Parameter 'freq' may not be negative.");
+
+  if (0 == _rate && throttle)
+    throw std::runtime_error("Parameter 'rate' is missing in arguments.");
+
+  _udp_rate = _rate;
+
+  _source = gr::blocks::udp_source::make( sizeof(gr_complex),
+                                           host.c_str(),
+                                           _port );
+
+  _throttle = gr::blocks::throttle::make( sizeof(gr_complex), _udp_rate );
+
+  if (throttle) {
+    connect( _source, 0, _throttle, 0 );
+    connect( _throttle, 0, self(), 0 );
+  } else {
+    connect( _source, 0, self(), 0 );
+  }
+}
+
+udp_source_c::~udp_source_c()
+{
+}
+
+std::string udp_source_c::name()
+{
+  return "IQ UDP Source";
+}
+
+std::vector<std::string> udp_source_c::get_devices( bool fake )
+{
+  std::vector<std::string> devices;
+
+  if ( fake )
+  {
+    std::string args = "host='0.0.0.0',port=8361";
+    args += ",rate=1e6,freq=100e6,throttle=true";
+    args += ",label='Complex Sampled (IQ) File'";
+    devices.push_back( args );
+  }
+
+  return devices;
+}
+
+size_t udp_source_c::get_num_channels( void )
+{
+  return 1;
+}
+
+osmosdr::meta_range_t udp_source_c::get_sample_rates( void )
+{
+  osmosdr::meta_range_t range;
+
+  range += osmosdr::range_t( _udp_rate ); /* always return udp's original rate */
+
+  return range;
+}
+
+double udp_source_c::set_sample_rate( double rate )
+{
+  if ( _udp_rate != rate )
+  {
+    std::cerr << boost::format("WARNING: Overriding original sample rate of %g with %g")
+                 % _udp_rate % rate
+              << std::endl;
+  }
+
+  _throttle->set_sample_rate( rate );
+
+  _rate = rate;
+
+  return get_sample_rate();
+}
+
+double udp_source_c::get_sample_rate( void )
+{
+  return _rate;
+}
+
+osmosdr::freq_range_t udp_source_c::get_freq_range( size_t chan )
+{
+  return osmosdr::freq_range_t(_freq, _freq);
+}
+
+double udp_source_c::set_center_freq( double freq, size_t chan )
+{
+  return get_center_freq(chan);
+}
+
+double udp_source_c::get_center_freq( size_t chan )
+{
+  return _freq;
+}
+
+double udp_source_c::set_freq_corr( double ppm, size_t chan )
+{
+  return get_freq_corr( chan );
+}
+
+double udp_source_c::get_freq_corr( size_t chan )
+{
+  return 0;
+}
+
+std::vector<std::string> udp_source_c::get_gain_names( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+osmosdr::gain_range_t udp_source_c::get_gain_range( size_t chan )
+{
+  return osmosdr::gain_range_t();
+}
+
+osmosdr::gain_range_t udp_source_c::get_gain_range( const std::string & name, size_t chan )
+{
+  return get_gain_range( chan );
+}
+
+double udp_source_c::set_gain( double gain, size_t chan )
+{
+  return get_gain(chan);
+}
+
+double udp_source_c::set_gain( double gain, const std::string & name, size_t chan )
+{
+  return set_gain(chan);
+}
+
+double udp_source_c::get_gain( size_t chan )
+{
+  return 0;
+}
+
+double udp_source_c::get_gain( const std::string & name, size_t chan )
+{
+  return get_gain(chan);
+}
+
+std::vector< std::string > udp_source_c::get_antennas( size_t chan )
+{
+  return std::vector< std::string >();
+}
+
+std::string udp_source_c::set_antenna( const std::string & antenna, size_t chan )
+{
+  return get_antenna(chan);
+}
+
+std::string udp_source_c::get_antenna( size_t chan )
+{
+  return "";
+}
diff --git a/lib/udp/udp_source_c.h b/lib/udp/udp_source_c.h
new file mode 100644
index 0000000..3073f66
--- /dev/null
+++ b/lib/udp/udp_source_c.h
@@ -0,0 +1,83 @@
+/* -*- c++ -*- */
+/*
+ * Copyright 2012 Dimitri Stolnikov <horiz0n@gmx.net>
+ *
+ * GNU Radio is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3, or (at your option)
+ * any later version.
+ *
+ * GNU Radio is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GNU Radio; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street,
+ * Boston, MA 02110-1301, USA.
+ */
+#ifndef UDP_SOURCE_C_H
+#define UDP_SOURCE_C_H
+
+#include <gnuradio/hier_block2.h>
+#include <gnuradio/blocks/udp_source.h>
+#include <gnuradio/blocks/throttle.h>
+
+#include "source_iface.h"
+
+class udp_source_c;
+
+typedef boost::shared_ptr< udp_source_c > udp_source_c_sptr;
+
+udp_source_c_sptr make_udp_source_c( const std::string & args = "" );
+
+class udp_source_c :
+    public gr::hier_block2,
+    public source_iface
+{
+private:
+  friend udp_source_c_sptr make_udp_source_c(const std::string &args);
+
+  udp_source_c(const std::string &args);
+
+public:
+  ~udp_source_c();
+
+  std::string name();
+
+  static std::vector< std::string > get_devices( bool fake = false );
+
+  size_t get_num_channels( void );
+
+  osmosdr::meta_range_t get_sample_rates( void );
+  double set_sample_rate( double rate );
+  double get_sample_rate( void );
+
+  osmosdr::freq_range_t get_freq_range( size_t chan = 0 );
+  double set_center_freq( double freq, size_t chan = 0 );
+  double get_center_freq( size_t chan = 0 );
+  double set_freq_corr( double ppm, size_t chan = 0 );
+  double get_freq_corr( size_t chan = 0 );
+
+  std::vector<std::string> get_gain_names( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( size_t chan = 0 );
+  osmosdr::gain_range_t get_gain_range( const std::string & name, size_t chan = 0 );
+  double set_gain( double gain, size_t chan = 0 );
+  double set_gain( double gain, const std::string & name, size_t chan = 0 );
+  double get_gain( size_t chan = 0 );
+  double get_gain( const std::string & name, size_t chan = 0 );
+
+  std::vector< std::string > get_antennas( size_t chan = 0 );
+  std::string set_antenna( const std::string & antenna, size_t chan = 0 );
+  std::string get_antenna( size_t chan = 0 );
+
+private:
+  gr::blocks::udp_source::sptr _source;
+  gr::blocks::throttle::sptr _throttle;
+  double _udp_rate;
+  double _freq, _rate;
+  int _port;
+};
+
+#endif // UDP_SOURCE_C_H
